// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Planner.DataAccess;

#nullable disable

namespace Planner.DataAccess.Migrations
{
    [DbContext(typeof(PlannerDbContext))]
    [Migration("20241105190415_Initial_migration")]
    partial class Initial_migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.2.24474.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Planner.DataAccess.Entities.BoardEntity", b =>
                {
                    b.Property<int>("BoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BoardId"));

                    b.Property<string>("BoardDescription")
                        .HasColumnType("text");

                    b.Property<string>("BoardTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<int>("FKUserId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("BoardId");

                    b.HasIndex("BoardTitle");

                    b.HasIndex("FKUserId");

                    b.ToTable("BoardInfo");
                });

            modelBuilder.Entity("Planner.DataAccess.Entities.ColumnEntity", b =>
                {
                    b.Property<int>("ColumnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ColumnId"));

                    b.Property<string>("ColumnTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<int>("FKBoardId")
                        .HasColumnType("integer");

                    b.Property<int>("FKUserId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ColumnId");

                    b.HasIndex("ColumnTitle")
                        .IsUnique();

                    b.HasIndex("FKBoardId")
                        .IsUnique();

                    b.HasIndex("FKUserId");

                    b.ToTable("ColumnInfo");
                });

            modelBuilder.Entity("Planner.DataAccess.Entities.RoleEntity", b =>
                {
                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleDescription")
                        .HasColumnType("text");

                    b.HasKey("RoleName");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Planner.DataAccess.Entities.TaskEntity", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskId"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<int>("FKColumnId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TaskComplexity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("TaskDeadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("text");

                    b.Property<string>("TaskProgress")
                        .HasColumnType("text");

                    b.Property<string>("TaskTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaskUrgency")
                        .HasColumnType("text");

                    b.HasKey("TaskId");

                    b.HasIndex("FKColumnId");

                    b.HasIndex("TaskTitle")
                        .IsUnique();

                    b.HasIndex("TaskUrgency");

                    b.ToTable("TaskInfo");
                });

            modelBuilder.Entity("Planner.DataAccess.Entities.UrgencyEntity", b =>
                {
                    b.Property<string>("Urgency")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UrgencyColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Urgency");

                    b.ToTable("Urgency");
                });

            modelBuilder.Entity("Planner.DataAccess.Entities.UserEntity", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModificationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Role");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("UserInfo");
                });

            modelBuilder.Entity("Planner.DataAccess.Entities.BoardEntity", b =>
                {
                    b.HasOne("Planner.DataAccess.Entities.UserEntity", "UserId")
                        .WithMany()
                        .HasForeignKey("FKUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserId");
                });

            modelBuilder.Entity("Planner.DataAccess.Entities.ColumnEntity", b =>
                {
                    b.HasOne("Planner.DataAccess.Entities.BoardEntity", "BoardId")
                        .WithMany()
                        .HasForeignKey("FKBoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planner.DataAccess.Entities.UserEntity", "UserId")
                        .WithMany()
                        .HasForeignKey("FKUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BoardId");

                    b.Navigation("UserId");
                });

            modelBuilder.Entity("Planner.DataAccess.Entities.TaskEntity", b =>
                {
                    b.HasOne("Planner.DataAccess.Entities.ColumnEntity", "ColumnId")
                        .WithMany()
                        .HasForeignKey("FKColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Planner.DataAccess.Entities.UrgencyEntity", "Urgency")
                        .WithMany()
                        .HasForeignKey("TaskUrgency");

                    b.Navigation("ColumnId");

                    b.Navigation("Urgency");
                });

            modelBuilder.Entity("Planner.DataAccess.Entities.UserEntity", b =>
                {
                    b.HasOne("Planner.DataAccess.Entities.RoleEntity", "RoleName")
                        .WithMany()
                        .HasForeignKey("Role")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoleName");
                });
#pragma warning restore 612, 618
        }
    }
}
